package scout;

import java.util.HashSet;

import javax.annotation.PostConstruct;

import bwapi.*;
import bwta.BWTA;
import bwta.BaseLocation;

public class ScoutManager {
	Unit myScout;
	Game myGame;
	Position enemyBaseLoc;
	private HashMap<Position, Unit> enemyUnitMemory = new HashMap<Position, Unit>();
	
	public ScoutManager(Unit scout, Game game) {
		myScout = scout;
		myGame = game;
		System.out.println("I have a scout! Whee.");
		findBase();
		
	}
	
	private void findBase() {
		for (BaseLocation baseL : BWTA.getBaseLocations()) {
			if(baseL.isStartLocation() && baseL.getTilePosition() != myGame.self().getStartLocation()) {
				myScout.move(baseL.getPosition(), true);
			}
		}
	}
	
	public boolean foundEnemy() {
		if (!myGame.enemy().getUnits().isEmpty())
			return true;
		else
			return false;
	}
	
	public void primeScout() {
		int minDist = 1000000000;
		int curDist;
		Position bestPos = null;
		
		for (BaseLocation baseL : BWTA.getBaseLocations()) {
			if(baseL.isStartLocation() && baseL.getTilePosition() != myGame.self().getStartLocation()) {
				curDist = baseL.getPosition().getApproxDistance(myScout.getPosition());
				if (curDist < minDist) {
					minDist = curDist;
					bestPos = baseL.getPosition();
				}
			}
		}
		
		enemyBaseLoc = bestPos;
		
		if (enemyBaseLoc != null) {
			myScout.move(enemyBaseLoc);
		}
		
		else {
			myScout.stop();
		}
	}
	
	public boolean distToEnemy(int lim) {
		if (myScout.getPosition().getApproxDistance(enemyBaseLoc) <= lim) {
			return true;
		}
		return false;
	}
	
	public Position getEnemyBaseLoc() {
		return enemyBaseLoc;
	}
	
	public void reportEnemy() {
		myScout.stop();
		for (Unit eUnit : myGame.enemy().getUnits()) {
			if (!enemyUnitMemory.contains(eUnit.getPosition())) {
				enemyUnitMemory.add(eUnit.getPosition());
			}
		}
	}
	
	public Unit getScout() {
		return myScout;
	}	
}
